								NAME:Foram Jhaveri
								ID:0849796
								SUBJECT:WEB APPLICATION SECURITY
								INSTUCTOR NAME: ANDREW STEEL
								LAB: TUTORIAL POINTS

20240120242:21

I completed part1,part2,part3.

			PART-1

I downloaded and installed Visual Studio from the official website. 
I created a new project, selected the given template. 
I wrote the "Hello World" code in the project, 
It displayed correctly in the browser running successfully. 

			PART-2

I added a controller to an ASP.NET Core MVC app by creating a new empty
MVC controller named "HelloWorldController.cs".
I modified the controller to include methods which are Index() and Welcome(), 
which handle HTTP requests and return appropriate responses. 
I tested the controller's functionality by 
passing parameters through the URL and verifying the responses.

			Part-3

I added a view to the ASP.NET Core MVC app by creating a razor view file named 
"Index.cshtml" in the "HelloWorld" folder. 
I modified the layout file to change the title, 
footer, and menu link.Then, I passed data from the controller
to the view using ViewData dictionary, and displayed 
dynamic content based on the passed data in the view.

			Part-4

I added a data model class named "Movie.cs" to manage movies in
the database. Then, I added necessary NuGet packages and scaffolded 
CRUD pages for the movie model using Entity Framework. 
I performed the initial migration to create the database.

			Part-5

I worked with database during this part.
The database context is registered with the Dependency
Injection container in the "Program.cs" file.
Then, I worked on SQL Server Express LocalSB by right-clicking SQL Server
Object Explorer and dbo.Movie and View Designer. 
But during the view data part I was having error twice I tried to solved
the error but the database was not showing.
So, I creted all steps again then I was able to see the databse.


202402081:30

			Part-6

In this part, I enhanced the ASP.NET Core MVC movie app by refining the presentation of movie 
data and exploring controller methods and views. I made adjustments to the Movie model to 
improve display, examined how anchor tag helpers generate links, delved into the Edit action 
methods of the Movies controller, and scrutinized the associated Edit view generated by 
the scaffolding system. I explored form submission, server-side validation.

			PART-7

In this part, I improved the ASP.NET Core MVC movie app by including search capability
based on movie genre and title. I updated the MoviesController's Index action method to match 
the search queries, created the appropriate LINQ queries to filter movies by genre and title, 
and changed the Index view to include search options for both genre and title. I also introduced 
the MovieGenreViewModel class, which manages the data for genre selection and search string input.

			PART-8

In this section, I expanded the ASP.NET Core MVC movie app by including a new field, 
"Rating," in the Movie model. I updated the model class, amended the MoviesController's
property binding list, and changed the view templates to show, create, and modify the 
new Rating property. In addition, I changed the SeedData class to include a value for 
the new field.I utilized Entity Framework Code First Migrations to incorporate the new 
field into the database schema.

			PART-9

In this section, validation rules were introduced to the Movie
model of the ASP.NET Core MVC application. Validation logic was
enforced on both the client and server sides using DataAnnotations
properties such as Required, StringLength, RegularExpression, 
and Range. This assures data integrity and a user-friendly
experience during film production and editing.

			PART-10

In this part, we looked at the Movie controller's Details, Delete, 
and DeleteConfirmed methods. The Details method obtains and shows movie
information, and Delete and DeleteConfirmed handle deletions, ensuring 
correct HTTP request handling and security.
